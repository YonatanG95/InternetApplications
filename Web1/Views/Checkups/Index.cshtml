@model IEnumerable<(Web1.Models.Checkup, Web1.Models.Patient)>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Item1.ID)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Item1.Type)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Item1.Result)
        </th>
        @*<th>
            @Html.DisplayNameFor(model => model.Doctor_ID)
        </th>*@
        <th>
            @Html.DisplayNameFor(model => model.Item2.FirstName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Item2.LastName)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Item1.ID)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Item1.Type)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Item1.Result)
        </td>
        @*<td>
            @Html.DisplayFor(modelItem => item.Doctor_ID)
        </td>*@
        <td>
            @Html.DisplayFor(modelItem => item.Item2.FirstName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Item2.LastName)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id = item.Item1.ID }) |
            @Html.ActionLink("Details", "Details", new { id = item.Item1.ID }) |
            @Html.ActionLink("Delete", "Delete", new { id = item.Item1.ID })
        </td>
    </tr>
    }

</table>
<div>
    <script src="http://code.jquery.com/jquery-1.10.2.min.js"></script>
    <script src="https://d3js.org/d3.v3.js"></script>
    <script src="http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js"></script>
    <script>


        // set the dimensions of the canvas
        var margin = { top: 20, right: 20, bottom: 70, left: 400 },
            width = 600 - margin.left - margin.right,
            height = 300 - margin.top - margin.bottom;


        // set the ranges
        var x = d3.scale.ordinal().rangeRoundBands([0, width], .05);

        var y = d3.scale.linear().range([height, 0]);

        // define the axis
        var xAxis = d3.svg.axis()
            .scale(x)
            .orient("bottom")


        var yAxis = d3.svg.axis()
            .scale(y)
            .orient("left")
            .ticks(8);
        var tip = d3.tip()
            .attr('class', 'd3-tip')
            .offset([-10, 0])
            .html(function (d) {
                return "<strong>Positive Results:</strong> <span style='color:red'>" + d.positiveResults + "</span>";
            })

        // add the SVG element
        var svg = d3.select("body").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");
        $("svg").css({ left: 20, position: 'absolute' });
        svg.call(tip);
        // load the data
        d3.json("http://localhost:50381/api/Checkupsapi", function (error, data) {

            data.forEach(function (d) {
                d.type = d.type;
                d.positiveResults = +d.positiveResults;
            });

            // scale the range of the data
            x.domain(data.map(function (d) { return d.type; }));
            y.domain([0, d3.max(data, function (d) { return d.positiveResults; })]);

            // add axis
            svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis)
                .selectAll("text")
                .style("text-anchor", "end")
                .attr("dx", "-.8em")
                .attr("dy", "-.55em")
                .attr("transform", "rotate(-90)");

            svg.append("g")
                .attr("class", "y axis")
                .call(yAxis)
                .append("text")
                .attr("y", -16)
                .attr("dy", ".71em")
                .style("text-anchor", "end")
                .text("Positive Results Count");


            // Add bar chart
            svg.selectAll("bar")
                .data(data)
                .enter().append("rect")
                .attr("class", "bar")
                .attr("x", function (d) { return x(d.type); })
                .attr("width", x.rangeBand() - 20)
                .attr("y", function (d) { return y(d.positiveResults); })
                .attr("height", function (d) { return height - y(d.positiveResults); })
                .on('mouseover', tip.show)
                .on('mouseout', tip.hide)

        });


    </script>
</div>
<style>

    /*body {
        font: 10px sans-serif;
    }*/

    .axis path,
    .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }

    .bar {
        fill: orange;
    }

        .bar:hover {
            fill: orangered;
        }

    .x.axis path {
        display: none;
    }

    .d3-tip {
        line-height: 1;
        font-weight: bold;
        padding: 12px;
        background: rgba(0, 0, 0, 0.8);
        color: #fff;
        border-radius: 2px;
    }

        /* Creates a small triangle extender for the tooltip */
        .d3-tip:after {
            box-sizing: border-box;
            display: inline;
            font-size: 10px;
            width: 100%;
            line-height: 1;
            color: rgba(0, 0, 0, 0.8);
            content: "\25BC";
            position: absolute;
            text-align: center;
        }

        /* Style northward tooltips differently */
        .d3-tip.n:after {
            margin: -1px 0 0 0;
            top: 100%;
            left: 0;
        }
</style>
